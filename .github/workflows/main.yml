# This is a basic workflow to help you get started with Actions

name: AppScan on Cloud Full SAST scan workflow

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Check powershell version
        run: |
          $PSVersionTable
        shell: pwsh
      # Runs a set of commands using the runners shell
      - name: list directory
        run: |
          ls
        shell: pwsh
      # Runs a set of commands using the runners shell
      - name: Perform HCL AppScan Security Analysis
        env:
          ASOC_KEY: ${{ secrets.ASOC_API_KEY }}
          ASOC_SECRET: ${{ secrets.ASOC_API_SECRET }}
          TestVar: abcd
          ASOC_SCAN_NAME: Automated Scan from Github Actions
          ASOC_APPID: acd3ef50-6276-461d-8514-abc6e7113577

        run: |
          $baseURL = 'https://cloud.appscan.com/api/V2'
          $env:ASoC_appID = $env:ASOC_APPID
          $env:ASoC_scanName = $env:ASOC_SCAN_NAME
          $env:ASoC_IRX_Config_file = "appscan-config.xml"
          $bearer_token =''
          $jsonBody = "
            {
            `"KeyId`": `"$env:ASOC_KEY`",
            `"KeySecret`": `"$env:ASOC_SECRET`"
            }
          "
          $params = @{
          Uri         = "$baseURL/Account/ApiKeyLogin"
          Method      = 'POST'
          Body        = $jsonBody
          Headers = @{
              'Content-Type' = 'application/json'
            }
          }
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls -bor [Net.SecurityProtocolType]::Tls11 -bor [Net.SecurityProtocolType]::Tls12
          $Members = Invoke-RestMethod @params
          Write-Host "Auth successful - Token received: $Members.token"
          $bearer_token = $Members.token
          $ProgressPreference = 'SilentlyContinue'
          # Invoke-WebRequest -Uri "https://cloud.appscan.com/api/Local/StaticAnalyzer/ARSATool" -OutFile "saclientutil.zip"
          # Expand-Archive -Path "saclientutil.zip" -DestinationPath "saclientutil"
          # $SAClientUtilFolder = Get-ChildItem -Path .\saclientutil
          # $command = ".\saclientutil\" + $SAClientUtilFolder.name + "\bin\appscan.bat"
          # & $command prepare -c $env:ASoC_IRX_Config_file -n output.irx
          
          Invoke-WebRequest -Uri "https://cloud.appscan.com/api/V2/Tools/ScanDemoFiles/StaticAnalyzer" -OutFile "output.irx"
          
          $irx_file = [IO.File]::ReadAllBytes('output.irx')
          $params = @{
            Uri         = "$baseURL/FileUpload"
            Method      = 'Post'
            Headers = @{
              'Content-Type' = 'multipart/form-data'
              Authorization = "Bearer $bearer_token"
            }
             Form = @{
            'fileToUpload' = Get-Item -Path "output.irx"
           }
          }
          $upload = Invoke-RestMethod @params
          $upload_File_ID = $upload.FileId
          write-host "IRX Uploaded File ID: $upload_File_ID"
          $params = @{
            Uri         = "$baseURL/Scans/StaticAnalyzer"
            Method      = 'Post'
            Headers = @{
              'Content-Type' = 'application/json'
              Authorization = "Bearer $bearer_token"
            }
          }
          $body = @{
             'ApplicationFileId' = "$upload_File_ID"
             'ScanName' = "$env:ASoC_scanName"
             'EnableMailNotification' = "true"
             'Locale' = "en-US"
             'AppId' = "$env:ASoC_appID"
             'Execute' = "true"
             'FullyAutomatic' = "false"
             'Personal' = "false"
          }
          $output_runscan = Invoke-RestMethod @params -Body ($body|ConvertTo-JSON)
          write-host "Scan executed"
          Write-Host $output_runscan
          $scan_ID = $output_runscan.Id
          $params = @{
            Uri         = "$baseURL/Scans/$scan_ID/Executions"
            Method      = 'Get'
            Headers = @{
              'Content-Type' = 'application/json'
              Authorization = "Bearer $bearer_token"
            }
          }
          $scan_status ="Not Ready"
          while($scan_status -ne "Ready"){
            $output = Invoke-RestMethod @params
            $scan_status = $output.Status
            Start-Sleep -Seconds 10
            Write-Host "Waiting for Scan Completion..."
          }
          $params = @{
            Uri         = "$baseURL/Reports/Security/Scan/$scan_ID"
            Method      = 'Post'
            Headers = @{
              'Content-Type' = 'application/json'
              Authorization = "Bearer $bearer_token"
            }
          }
          $body = @{
            'Configuration' = @{
              'Summary' = "true"
              'Details' = "true"
              'Discussion' = "true"
              'Overview' = "true"
              'TableOfContent' = "true"
              'Advisories' = "true"
              'FixRecommendation' = "true"
              'History' = "true"
              'Coverage' = "true"
              'MinimizeDetails' = "true"
              'Articles' = "true"
              'ReportFileType' = "HTML"
              'Title' = "false"
              'Locale' = "en-US"
            }
          }
          $output_runreport = Invoke-RestMethod @params -Body ($body|ConvertTo-JSON)
          $report_ID = $output_runreport.Id
          #Wait for report
          $params = @{
            Uri         = "$baseURL/Reports/$report_ID"
            Method      = 'Get'
            Headers = @{
              'Content-Type' = 'application/json'
              Authorization = "Bearer $bearer_token"
            }
          }
          $report_status ="Not Ready"
          while($report_status -ne "Ready"){
            $output = Invoke-RestMethod @params
            $report_status = $output.Status
            Start-Sleep -Seconds 5
            Write-Host "Generating Report... Progress: " $output.Progress "%"
          }
          #Download Report
          $params = @{
            Uri         = "$baseURL/Reports/Download/$report_ID"
            Method      = 'Get'
            Headers = @{
              'Accept' = 'text/html'
              Authorization = "Bearer $bearer_token"
            }
          }
          $output_runreport = Invoke-RestMethod @params
          Out-File -InputObject $output_runreport -FilePath .\AppScan_Security_Report.html

        shell: pwsh
      - uses: actions/upload-artifact@v2
        with:
          name: AppScan Scan Report
          path: AppScan_Security_Report.html
