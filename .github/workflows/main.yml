# This is a basic workflow to help you get started with Actions

name: AppScan on Cloud Full SAST scan workflow

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Check powershell version
        run: |
          $PSVersionTable
        shell: pwsh
      # Runs a set of commands using the runners shell
      - name: list directory
        run: |
          ls
        shell: pwsh
      # Runs a set of commands using the runners shell
      - name: Perform HCL AppScan Security Analysis
        run: |
          $baseURL = 'https://cloud.appscan.com/api/V2'
          $env:ASoC_appID = 'acd3ef50-6276-461d-8514-abc6e7113577'
          $env:ASoC_scanName = 'Automated Scan from Circle CI'
          $env:ASoC_IRX_Config_file = "appscan-config.xml"
          $bearer_token =''
          $jsonBody = "
            {
            `"KeyId`": `"$env.ASOC_API_KEY`",
            `"KeySecret`": `"$env.ASOC_API_SECRET`"
            }
          "
          $params = @{
          Uri         = "$baseURL/Account/ApiKeyLogin"
          Method      = 'POST'
          Body        = $jsonBody
          Headers = @{
              'Content-Type' = 'application/json'
          }
          }
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls -bor [Net.SecurityProtocolType]::Tls11 -bor [Net.SecurityProtocolType]::Tls12
          $Members = Invoke-RestMethod @params
          Write-Host "Auth successful - Token received: $Members.token"
          $bearer_token = $Members.token
          Write-Host $bearer_token
        env:
          ASOC_API_KEY = ${{secrets.ASOC_API_KEY}}
          ASOC_API_SECRET = ${{secrets.ASOC_API_SECRET}}
          
        shell: pwsh
