# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  win: circleci/windows@2.4.0

jobs:
  build:
    executor:
      name: win/default
      shell: powershell.exe

    steps:
      - run:
          name: "Update Powershell"
          command: |
           choco install powershell-core -y
          shell: powershell.exe
      - run:
          name: "test PS ver"
          command: |
             $PSVersionTable
          shell: pwsh.exe
      - checkout
      - restore_cache:
          keys:
            - v1-app
      - run:
          name: "Install project dependencies"
          command: dotnet.exe restore
      - save_cache:
          key: v1-app
          paths:
            - C:\Users\circleci\.nuget\packages
      - run:
          name: "Run Build step"
          command: dotnet.exe publish -c Release -r win-x64
      - run:
          name: "Run HCL AppScan Static Analysis"
          command: |
            $baseURL = 'https://cloud.appscan.com/api/V2'
            #$env:ASoC_IRX_Config_file = "C:\Users\circleci\project\appscan-config.xml"
            $env:ASoC_appID = 'acd3ef50-6276-461d-8514-abc6e7113577'
            $env:ASoC_scanName = 'Automated Scan from Circle CI'
            $env:ASoC_IRX_Config_file = "C:\Users\circleci\project\appscan-config.xml"
            $bearer_token =''
            $jsonBody = "
              {
              `"KeyId`": `"$env:ASoC_API_Key`",
              `"KeySecret`": `"$env:ASoC_API_Secret`"
              }
            "
            $params = @{
            Uri         = "$baseURL/Account/ApiKeyLogin"
            Method      = 'POST'
            Body        = $jsonBody
            Headers = @{
                'Content-Type' = 'application/json'
            }
            }
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls -bor [Net.SecurityProtocolType]::Tls11 -bor [Net.SecurityProtocolType]::Tls12
            $Members = Invoke-RestMethod @params
            Write-Host "Auth successful - Token received: $Members.token"
            $bearer_token = $Members.token
            $ProgressPreference = 'SilentlyContinue'
            
            # ASoC -  Download the latest version of SAClientUtil to generate the .irx in preparation for the scan
            Write-Host "Downloading latest verion of SAClientUtil..."
            
            # Comment out this lines for a proper .irx generation. This line is for demo purposes, it only downloads a sample .irx file that is not related to the source code in this repo
            Invoke-WebRequest -Uri "https://cloud.appscan.com/api/V2/Tools/ScanDemoFiles/StaticAnalyzer" -OutFile "output.irx"


            $irx_file = [IO.File]::ReadAllBytes('output.irx')
            $params = @{
              Uri         = "$baseURL/FileUpload"
              Method      = 'Post'
              Headers = @{
                    'Content-Type' = 'multipart/form-data'
                    Authorization = "Bearer $bearer_token"
                }
               Form = @{
                'fileToUpload' = Get-Item -Path "output.irx"
             }
            }
            $upload = Invoke-RestMethod @params
            $upload_File_ID = $upload.FileId
            write-host "IRX Uploaded File ID: $upload_File_ID"
            $params = @{
                Uri         = "$baseURL/Scans/StaticAnalyzer"
                Method      = 'Post'
                Headers = @{
                    'Content-Type' = 'application/json'
                    Authorization = "Bearer $bearer_token"
                }
            }
            $body = @{
               'ApplicationFileId' = "$upload_File_ID"
               'ScanName' = "$env:ASoC_scanName"
               'EnableMailNotification' = "true"
               'Locale' = "en-US"
               'AppId' = "$env:ASoC_appID"
               'Execute' = "true"
               'FullyAutomatic' = "false"
               'Personal' = "false"
            }
            $output_runscan = Invoke-RestMethod @params -Body ($body|ConvertTo-JSON)
            write-host "Scan executed"
            Write-Host $output_runscan
            $scan_ID = $output_runscan.Id
            $params = @{
                Uri         = "$baseURL/Scans/$scan_ID/Executions"
                Method      = 'Get'
                Headers = @{
                    'Content-Type' = 'application/json'
                    Authorization = "Bearer $bearer_token"
                }
            }
            $scan_status ="Not Ready"
            while($scan_status -ne "Ready"){
                $output = Invoke-RestMethod @params
                $scan_status = $output.Status
                Start-Sleep -Seconds 10
                Write-Host "Waiting for Scan Completion..."
            }
            $params = @{
                Uri         = "$baseURL/Reports/Security/Scan/$scan_ID"
                Method      = 'Post'
                Headers = @{
                    'Content-Type' = 'application/json'
                    Authorization = "Bearer $bearer_token"
                }
            }
            $body = @{
                'Configuration' = @{
                    'Summary' = "true"
                    'Details' = "true"
                    'Discussion' = "true"
                    'Overview' = "true"
                    'TableOfContent' = "true"
                    'Advisories' = "true"
                    'FixRecommendation' = "true"
                    'History' = "true"
                    'Coverage' = "true"
                    'MinimizeDetails' = "true"
                    'Articles' = "true"
                    'ReportFileType' = "HTML"
                    'Title' = "false"
                    'Locale' = "en-US"
                }
            }
            $output_runreport = Invoke-RestMethod @params -Body ($body|ConvertTo-JSON)
            $report_ID = $output_runreport.Id
            #Wait for report
            $params = @{
                Uri         = "$baseURL/Reports/$report_ID"
                Method      = 'Get'
                Headers = @{
                    'Content-Type' = 'application/json'
                    Authorization = "Bearer $bearer_token"
                }
            }
            $report_status ="Not Ready"
            while($report_status -ne "Ready"){
                $output = Invoke-RestMethod @params
                $report_status = $output.Status
                Start-Sleep -Seconds 5
                Write-Host "Generating Report... Progress: " $output.Progress "%"
            }
            #Download Report
            $params = @{
                Uri         = "$baseURL/Reports/Download/$report_ID"
                Method      = 'Get'
                Headers = @{
                    'Accept' = 'text/html'
                    Authorization = "Bearer $bearer_token"
                }
            }
            $output_runreport = Invoke-RestMethod @params
            Out-File -InputObject $output_runreport -FilePath .\AppScan_Security_Report.html

          shell: pwsh.exe
      - store_artifacts:
          path: AppScan_Security_Report.html

